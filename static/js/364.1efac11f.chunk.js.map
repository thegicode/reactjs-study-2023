{"version":3,"file":"static/js/364.1efac11f.chunk.js","mappings":"gLAEe,SAASA,IACpB,IAAAC,GAA4BC,EAAAA,EAAAA,UAAiB,GAAEC,GAAAC,EAAAA,EAAAA,GAAAH,EAAA,GAAxCI,EAAMF,EAAA,GAAEG,EAASH,EAAA,GACxBI,GAA4BL,EAAAA,EAAAA,WAAkB,GAAKM,GAAAJ,EAAAA,EAAAA,GAAAG,EAAA,GAA5CE,EAAMD,EAAA,GAAEE,EAASF,EAAA,GAElBG,GAAcC,EAAAA,EAAAA,cAAY,WAC5BC,QAAQC,IAAI,cAAeT,EAE/B,GAAG,CAACA,IAOJ,OAJAU,EAAAA,EAAAA,YAAU,WACNF,QAAQC,IAAI,gEAChB,GAAG,CAACH,KAGAK,EAAAA,EAAAA,MAAA,WAASC,UAAU,cAAaC,SAAA,EAC5BC,EAAAA,EAAAA,KAAA,SACIC,KAAK,SACLC,IAAI,IACJC,MAAOjB,EACPkB,SAAU,SAACC,GAAC,OAAKlB,EAAUmB,OAAOD,EAAEE,OAAOJ,OAAO,KAMtDH,EAAAA,EAAAA,KAAA,UAAQC,KAAK,SAASO,QAAShB,EAAYO,SAAC,WAI5CF,EAAAA,EAAAA,MAAA,OAAAE,SAAA,EACIC,EAAAA,EAAAA,KAAA,SACIC,KAAK,WACLQ,QAASnB,EACTc,SAAU,kBAAMb,GAAWD,EAAO,IAErCA,EAAOoB,gBAIxB,CCxCe,SAASC,IACpB,IAAA7B,GAAwBC,EAAAA,EAAAA,UAAiB,KAAIC,GAAAC,EAAAA,EAAAA,GAAAH,EAAA,GAAtC8B,EAAI5B,EAAA,GAAE6B,EAAO7B,EAAA,GACpBI,GAA4BL,EAAAA,EAAAA,WAAkB,GAAMM,GAAAJ,EAAAA,EAAAA,GAAAG,EAAA,GAA7C0B,EAAMzB,EAAA,GAAE0B,EAAS1B,EAAA,GAElB2B,GAAiBvB,EAAAA,EAAAA,cAAY,WAC/B,MAAO,CACHwB,gBAAiB,QACjBC,MAAM,GAADC,OAAKP,EAAI,MACdQ,OAAO,GAADD,OAAKP,EAAI,MAEvB,GAAG,CAACA,IAEES,EAAiBP,EAAS,aAAe,GAE/C,OACIjB,EAAAA,EAAAA,MAAA,WAASC,UAAW,eAAiBuB,EAAetB,SAAA,EAChDC,EAAAA,EAAAA,KAAA,SACIC,KAAK,SACLC,IAAI,IACJC,MAAOS,EACPR,SAAU,SAACC,GAAC,OAAKQ,EAAQP,OAAOD,EAAEE,OAAOJ,OAAO,KAEpDH,EAAAA,EAAAA,KAACsB,EAAG,CAACN,eAAgBA,KACrBnB,EAAAA,EAAAA,MAAA,OAAAE,SAAA,EACIC,EAAAA,EAAAA,KAAA,SAAOC,KAAK,WAAWG,SAAU,kBAAMW,GAAWD,EAAO,IACxDA,EAAOJ,gBAIxB,CAYA,SAASY,EAAGC,GAAgC,IAA7BP,EAAcO,EAAdP,eACXQ,GAA0BzC,EAAAA,EAAAA,UAA8B,MAAK0C,GAAAxC,EAAAA,EAAAA,GAAAuC,EAAA,GAAtDE,EAAKD,EAAA,GAAEE,EAAQF,EAAA,GAOtB,OALA7B,EAAAA,EAAAA,YAAU,WACNF,QAAQC,IAAI,mCACZgC,EAASX,IACb,GAAG,CAACA,KAEGhB,EAAAA,EAAAA,KAAA,OAAK0B,MAAOA,GACvB,CChDe,SAASE,IACpB,OACI/B,EAAAA,EAAAA,MAAA,WAASC,UAAU,kBAAiBC,SAAA,EAChCC,EAAAA,EAAAA,KAAA,MAAAD,SAAI,sBAgCJC,EAAAA,EAAAA,KAAA,MAAAD,SAAI,oBACJC,EAAAA,EAAAA,KAAA,KAAAD,SAAG,+FACHC,EAAAA,EAAAA,KAACnB,EAAY,KAEbmB,EAAAA,EAAAA,KAAA,MAAAD,SAAI,oBACJC,EAAAA,EAAAA,KAACW,EAAY,MAMzB,C","sources":["contents/useCallback/UseCallback1.tsx","contents/useCallback/UseCallback2.tsx","pages/UseCallbackPage.tsx"],"sourcesContent":["import { useCallback, useEffect, useState } from \"react\";\n\nexport default function UseCallback1() {\n    const [number, setNumber] = useState<number>(0);\n    const [toggle, setToggle] = useState<boolean>(true);\n\n    const handleClick = useCallback(() => {\n        console.log(\"handleClick\", number);\n        return;\n    }, [number]);\n    // number가 바뀔 때마다 handleClick을 다시 memoization\n\n    useEffect(() => {\n        console.log(\"handleClick이 변경되었습니다.\");\n    }, [handleClick]);\n\n    return (\n        <section className=\"useCallback\">\n            <input\n                type=\"number\"\n                min=\"0\"\n                value={number}\n                onChange={(e) => setNumber(Number(e.target.value))}\n            />\n            {/* <button type=\"button\" onClick={() => setToggle(!toggle)}>\n                {toggle.toString()}\n            </button> */}\n\n            <button type=\"button\" onClick={handleClick}>\n                click\n            </button>\n\n            <div>\n                <input\n                    type=\"checkbox\"\n                    checked={toggle}\n                    onChange={() => setToggle(!toggle)}\n                />\n                {toggle.toString()}\n            </div>\n        </section>\n    );\n}\n","import { useCallback, useEffect, useState } from \"react\";\n\nexport default function UseCallback2() {\n    const [size, setSize] = useState<number>(100);\n    const [isDark, setIsDark] = useState<boolean>(false);\n\n    const createBoxStyle = useCallback(() => {\n        return {\n            backgroundColor: \"green\",\n            width: `${size}px`,\n            height: `${size}px`,\n        };\n    }, [size]);\n\n    const themeClassName = isDark ? \"theme-dark\" : \"\";\n\n    return (\n        <section className={\"useCallback \" + themeClassName}>\n            <input\n                type=\"number\"\n                min=\"0\"\n                value={size}\n                onChange={(e) => setSize(Number(e.target.value))}\n            />\n            <Box createBoxStyle={createBoxStyle} />\n            <div>\n                <input type=\"checkbox\" onChange={() => setIsDark(!isDark)} />\n                {isDark.toString()}\n            </div>\n        </section>\n    );\n}\n\ninterface BoxStyleType {\n    backgroundColor: string;\n    width: string;\n    height: string;\n}\n\ninterface BoxProps {\n    createBoxStyle: () => BoxStyleType;\n}\n\nfunction Box({ createBoxStyle }: BoxProps) {\n    const [style, setStyle] = useState<BoxStyleType | null>(null);\n\n    useEffect(() => {\n        console.log(\"박스 키우기\");\n        setStyle(createBoxStyle());\n    }, [createBoxStyle]);\n\n    return <div style={style!}></div>;\n}\n","import \"../css/useCallbackPage.css\";\nimport UseCallback1 from \"../contents/useCallback/UseCallback1\";\nimport UseCallback2 from \"../contents/useCallback/UseCallback2\";\n\nexport default function UseCallbackPage() {\n    return (\n        <section className=\"useCallbackPage\">\n            <h1>useCallback Page</h1>\n\n            {/* <p>\n                <strong>\n                    자주 사용하는 값을 memoozed 해놓고 반복적으로 사용. <br />\n                    값이 바뀔 때만 다시 memoization\n                </strong>\n            </p>\n\n            <code className=\"code-reference\">\n                const cachedValue = useMemo(calculateValue, dependencies)\n            </code>\n            <ul>\n                <li>\n                    렌더링 {\"->\"} component 함수 호출, useMemo를 통해\n                    memoization {\"->\"} 렌더링 {\"->\"} component 함수 호출,\n                    memoized 된 값 재사용\n                </li>\n                <li>\n                    dependencies 의존성 배열: 배열 안 요소의 값이 업데이트 될 때\n                    다시 Memoization\n                </li>\n                <li>\n                    의존성 배열이 빈 배열인 경우 맨처음 Memoization, 이후에는\n                    항상 Memoized된 값을 사용\n                </li>\n                <li>\n                    Memoization 한다는 것은 따로 메모리에 저장하는 것이므로\n                    무분별하게 남발하면 안된다. 꼭 필요할때만.\n                </li>\n            </ul>*/}\n\n            <h2>예제 1</h2>\n            <p>number가 바뀔 때마다 handleClick을 다시 memoization. </p>\n            <UseCallback1 />\n\n            <h2>예제 2</h2>\n            <UseCallback2 />\n\n            {/* <h2>예제 3</h2> */}\n            {/* <UseMemo3 />  */}\n        </section>\n    );\n}\n"],"names":["UseCallback1","_useState","useState","_useState2","_slicedToArray","number","setNumber","_useState3","_useState4","toggle","setToggle","handleClick","useCallback","console","log","useEffect","_jsxs","className","children","_jsx","type","min","value","onChange","e","Number","target","onClick","checked","toString","UseCallback2","size","setSize","isDark","setIsDark","createBoxStyle","backgroundColor","width","concat","height","themeClassName","Box","_ref","_useState5","_useState6","style","setStyle","UseCallbackPage"],"sourceRoot":""}