{"version":3,"file":"static/js/479.32f1de9d.chunk.js","mappings":"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","sources":["contents/memo/memo1/Child.tsx","contents/memo/memo1/index.tsx","contents/memo/memo2/Child.tsx","contents/memo/memo2/index.tsx","contents/memo/memo3/Child.tsx","contents/memo/memo3/index.tsx","contents/memo/Memo4.tsx","contents/memo/Memo5.tsx","contents/memo/Memo6.tsx","pages/MemoPage.tsx"],"sourcesContent":["import { memo } from \"react\";\n\ninterface ChildProps {\n    title: string;\n    amount: string;\n}\n\nfunction Child({ title, amount }: ChildProps) {\n    console.log(\"자식 컴포넌트\");\n\n    return (\n        <div className=\"child\">\n            <h4>Child Component</h4>\n            <p>제목: {title}</p>\n            <p>수량: {amount}</p>\n        </div>\n    );\n}\n\nexport default memo(Child);\n","import { useState } from \"react\";\nimport Child from \"./Child\";\n\nexport default function App() {\n    console.log(\"부모 컴포넌트\");\n    const [amount, setAmount] = useState<number>(0);\n    const [amountChild, setAmountChild] = useState<number>(0);\n\n    const increase = () => {\n        setAmount(amount + 1);\n    };\n    const increaseChild = () => {\n        setAmountChild(amountChild + 1);\n    };\n\n    return (\n        <section className=\"memo1\">\n            <h3>Parent Component</h3>\n            <span>수량: {amount}</span>\n            <button type=\"button\" onClick={increase}>\n                부모 수량 증가\n            </button>\n            <button type=\"button\" onClick={increaseChild}>\n                자식 수량 증가\n            </button>\n            <Child title=\"april\" amount={amountChild.toString()} />\n        </section>\n    );\n}\n","import { memo } from \"react\";\n\ninterface DataProps {\n    a: string;\n    b: string;\n}\n\ninterface ChildProps {\n    data: DataProps;\n}\n\nfunction Child({ data }: ChildProps) {\n    console.log(\"자식 컴포넌트\");\n\n    return (\n        <div className=\"child\">\n            <h4>Child Component</h4>\n            <p>{data.a}</p>\n            <p>{data.b}</p>\n        </div>\n    );\n}\n\nexport default memo(Child);\n","import { useState, useMemo } from \"react\";\nimport Child from \"./Child\";\n\nexport default function App() {\n    console.log(\"부모 컴포넌트\");\n    const [amount, setAmount] = useState<number>(0);\n\n    const increase = () => {\n        setAmount(amount + 1);\n    };\n\n    /* 1. 문제 발생: Child 리렌더링 */\n    // const data = {\n    //     a: \"a\",\n    //     b: \"b\",\n    // };\n    // Object data의 렌더링 될 때마다 다른 메모리 주소에 저장된다.\n    // 따라서 Child의 memo는 변화가 있는 것으로 인식하여 리렌더링된다.\n\n    /* 2. useMemo로 해결 */\n    const data = useMemo(() => {\n        return {\n            a: \"a\",\n            b: \"b\",\n        };\n    }, []);\n    // useMemo로 memoization 하여 참조 주소가 변경되지 않는다.\n    // memoized so the reference won't change between renders\n    // Child props가 변경되지 않으므로 리렌더링 되지 않는다.\n\n    return (\n        <section className=\"memo1\">\n            <h3>Parent Component</h3>\n            <span>수량: {amount}</span>\n            <button type=\"button\" onClick={increase}>\n                부모 수량 증가\n            </button>\n\n            <Child data={data} />\n        </section>\n    );\n}\n","import { memo } from \"react\";\n\ninterface ChildProps {\n    title: string;\n    passFn: () => void;\n}\n\nfunction Child({ title, passFn }: ChildProps) {\n    console.log(\"자식 컴포넌트\");\n\n    return (\n        <div className=\"child\">\n            <h4>Child Component</h4>\n            <p>제목: {title}</p>\n            <button onClick={passFn}>부모 메서드 실행</button>\n        </div>\n    );\n}\n\nexport default memo(Child);\n","import { useCallback, useState } from \"react\";\nimport Child from \"./Child\";\n\nexport default function App() {\n    console.log(\"부모 컴포넌트\");\n    const [amount, setAmount] = useState<number>(0);\n\n    const increase = () => {\n        setAmount(amount + 1);\n    };\n\n    /* 1. 문제 */\n    // const passFn =\n    //  () => {\n    //     console.log(\"부모 메서드 실행\");\n    // };\n    // passFn의 메모리 주소가 렌더링 될 때마다 변경된다. -> Child 리렌더링\n\n    /* 2. 해결 */\n    const passFn = useCallback(() => {\n        console.log(\"부모 메서드 실행\");\n    }, []);\n    // useCallback으로 passFn memoiztaion -> Child의 props가 변동이 없으므로 리렌더링되지 않는다.\n\n    return (\n        <section className=\"memo1\">\n            <h3>Parent Component</h3>\n            <span>수량: {amount}</span>\n            <button type=\"button\" onClick={increase}>\n                부모 수량 증가\n            </button>\n\n            <Child title=\"april\" passFn={passFn} />\n        </section>\n    );\n}\n","import React, { memo, useState, ChangeEvent, FC } from \"react\";\n\nconst Memo4: FC = () => {\n    const [name, setName] = useState<string>(\"\");\n    const [address, setAddress] = useState<string>(\"\");\n\n    const handleNameChange = (e: ChangeEvent<HTMLInputElement>) => {\n        setName(e.target.value);\n    };\n\n    const handleAddressChange = (e: ChangeEvent<HTMLInputElement>) => {\n        setAddress(e.target.value);\n    };\n\n    return (\n        <>\n            <div style={{ display: \"flex\", gap: \"10px\" }}>\n                <label>\n                    Name{\": \"}\n                    <input value={name} onChange={handleNameChange} />\n                </label>\n                <label>\n                    Address{\": \"}\n                    <input value={address} onChange={handleAddressChange} />\n                </label>\n            </div>\n            <Greeting name={name} />\n        </>\n    );\n};\n\ninterface GreetingProps {\n    name: string;\n}\n\nconst Greeting: FC<GreetingProps> = memo(({ name }) => {\n    console.log(\"Greeting was rendered at\", new Date().toLocaleTimeString());\n    return (\n        <h3>\n            Hello{name && \", \"}\n            {name}!\n        </h3>\n    );\n});\n\nexport default Memo4;\n","import React, { memo, useState } from \"react\";\n\nexport default function Memo5() {\n    const [name, setName] = useState<string>(\"\");\n    const [address, setAddress] = useState<string>(\"\");\n\n    return (\n        <>\n            <div style={{ display: \"flex\", gap: \"10px\" }}>\n                <label>\n                    Name{\": \"}\n                    <input\n                        value={name}\n                        onChange={(e) => setName(e.target.value)}\n                    />\n                </label>\n                <label>\n                    Address{\": \"}\n                    <input\n                        value={address}\n                        onChange={(e) => setAddress(e.target.value)}\n                    />\n                </label>\n            </div>\n            <Greeting name={name} />\n        </>\n    );\n}\n\ninterface GreetingProps {\n    name: string;\n}\n\nconst Greeting: React.FC<GreetingProps> = memo(({ name }) => {\n    console.log(\"Greeting was rendered at\", new Date().toLocaleTimeString());\n    const [greeting, setGreeting] = useState<string>(\"Hello\");\n    return (\n        <>\n            <h3>\n                {greeting}\n                {name && \", \"}\n                {name}!\n            </h3>\n            <GreetingSelector value={greeting} onChange={setGreeting} />\n        </>\n    );\n});\n\ninterface GreetingSelectorProps {\n    value: string;\n    onChange: (value: string) => void;\n}\n\nconst GreetingSelector: React.FC<GreetingSelectorProps> = ({\n    value,\n    onChange,\n}) => {\n    return (\n        <>\n            <label>\n                <input\n                    type=\"radio\"\n                    checked={value === \"Hello\"}\n                    onChange={() => onChange(\"Hello\")}\n                />\n                Regular greeting\n            </label>\n            <label>\n                <input\n                    type=\"radio\"\n                    checked={value === \"Hello and welcome\"}\n                    onChange={() => onChange(\"Hello and welcome\")}\n                />\n                Enthusiastic greeting\n            </label>\n        </>\n    );\n};\n","import React, { createContext, memo, useContext, useState } from \"react\";\n\ntype Theme = \"dark\" | \"light\";\nconst ThemeContext = createContext<Theme | null>(null);\n\nexport default function Memo6() {\n    const [theme, setTheme] = useState<Theme>(\"dark\");\n\n    function handleClick() {\n        setTheme((prevTheme) => (prevTheme === \"dark\" ? \"light\" : \"dark\"));\n    }\n\n    return (\n        <ThemeContext.Provider value={theme}>\n            <button onClick={handleClick}>Switch theme</button>\n            <Greeting name=\"Taylor\" />\n        </ThemeContext.Provider>\n    );\n}\n\ninterface GreetingProps {\n    name: string;\n}\n\nconst Greeting: React.FC<GreetingProps> = memo(({ name }) => {\n    console.log(\"Greeting was rendered at\", new Date().toLocaleTimeString());\n    const theme = useContext(ThemeContext);\n    if (!theme) {\n        throw new Error(\"Theme context is not set!\");\n    }\n    return <h3 className={theme}>Hello, {name}!</h3>;\n});\n","import \"../css/memoPage.css\";\nimport Memo1 from \"../contents/memo/memo1\";\nimport Memo2 from \"../contents/memo/memo2\";\nimport Memo3 from \"../contents/memo/memo3\";\nimport Memo4 from \"../contents/memo/Memo4\";\nimport Memo5 from \"../contents/memo/Memo5\";\nimport Memo6 from \"../contents/memo/Memo6\";\n\nexport default function memoPage() {\n    return (\n        <section className=\"memoPage\">\n            <h1>React Memo</h1>\n\n            <p>\n                <strong>prop이 변동되지 않으면 리렌더링을 하지 않는다.</strong>\n            </p>\n\n            <code className=\"code-reference\">\n                const MemoizedComponent = memo(SomeComponent, arePropsEqual?)\n            </code>\n\n            <ul>\n                <li>memo: memoization</li>\n                <li>불필요한 렌더링을 하지 않는다.</li>\n                <li>\n                    리엑트는 부모 컴포넌트가 렌더링되면 자식 컴포넌트로 자동으로\n                    렌더링된다.\n                </li>\n                <li>\n                    react memo를 적용하면 자식 컴포넌트를 props가 변경될 때만\n                    렌더링한다.\n                </li>\n                <li>\n                    react memo를 적용하면 props가 변경되지 않으면 컴포넌트는\n                    리렌더링을 하지 않고 기존에 렌더링된 것을 재사용한다.\n                </li>\n                <li>\n                    렌더링된 결과를 어딘가에 저장하기 때문에 무분별하게 사용하면\n                    안된다. 꼭 필요할때만!\n                </li>\n                <li>\n                    useState, useReducer, useContext 와 같은 상태와 같은 hook을\n                    사용하면 props와 상관없이 리렌더링된다.\n                </li>\n            </ul>\n\n            <h2>간단한 예제 : memo </h2>\n            <Memo1 />\n            <p>\n                - 부모 props가 변경될 때마다 자식 컴포턴트의 props가 변경이\n                없어도 리렌더링이 된다.\n            </p>\n            <p>\n                - React.memo를 사용하면 부모 props가 변경되더라도 자식\n                컴포넌트의 prop이 변화가 없으면 리렌더링을 하지 않고 저장되었던\n                것을 사용한다.\n            </p>\n\n            <h2>간단한 예제2: memo, useMemo</h2>\n            <Memo2 />\n            <p>- useMemo를 사용하여 Child는 리렌더링이 되지 않는다.</p>\n\n            <h2>간단한 예제3: memo, useCallback</h2>\n            <Memo3 />\n            <p>- useCallback 사용하여 Child는 리렌더링이 되지 않는다.</p>\n\n            <h2>Skipping re-rendering when props are unchanged</h2>\n            <Memo4 />\n            <p>\n                - name이 변경되면 Greeting component는 리렌더링된다. <br />\n                but memo를 적용하였으므로 address가 변경되면 Greeting\n                component는 리렌더링되지 않는다.\n            </p>\n\n            <h2>Updating a memoized component using state</h2>\n            <Memo5 />\n            <p>\n                - 컴포넌트의 state가 변경되면 컴포넌트가 memo 되었더라도\n                리렌더링된다.\n            </p>\n\n            <h2>Updating a memoized component using a context </h2>\n            <Memo6 />\n            <p>\n                memo를 적용했더라도 useContext를 사용하고 변경되었다면\n                리렌더링된다.\n            </p>\n\n            <h2>Minimizing props changes</h2>\n            <p>- memo를 최대한 활용하려면 props의 변경을 최소화</p>\n            <p>\n                - 예, prop이 object 이면, useMemo를 사용하여 object가 parent\n                component가 매번 object를 re-create 하지 않도록 한다.\n            </p>\n            <p>\n                - props가 변경되는 것을 최소화하기 위해, whole object 대신\n                individual value를 props로 적용하라.\n                <code>{\"<Profile person={person} />\"}</code> 대신\n                <code>{\"<Profile name={name} age={age} />\"}</code>\n            </p>\n            <p>\n                - 값 자체 보다는 값의 존재 여부\n                <code>{\"<CallToAction hasGroups={hasGroups} />\"}</code>\n            </p>\n\n            <h2>\n                arePropsEqual의 활용 :S pecifying a custom comparison function{\" \"}\n            </h2>\n        </section>\n    );\n}\n"],"names":["Child","_ref","title","amount","console","log","_jsxs","className","children","_jsx","memo","App","_useState","useState","_useState2","_slicedToArray","setAmount","_useState3","_useState4","amountChild","setAmountChild","type","onClick","toString","data","a","b","useMemo","passFn","useCallback","Greeting","name","Date","toLocaleTimeString","setName","address","setAddress","_Fragment","style","display","gap","value","onChange","e","target","Memo5","_useState5","_useState6","greeting","setGreeting","GreetingSelector","_ref2","checked","ThemeContext","createContext","Memo6","theme","setTheme","Provider","prevTheme","useContext","Error","memoPage","Memo1","Memo2","Memo3","Memo4"],"sourceRoot":""}