{"version":3,"file":"static/js/176.d3f6ff3f.chunk.js","mappings":"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","sources":["contents/addToCart/AddToCart1.tsx","contents/addToCart/AddToCart2.tsx","contents/addToCart/AddToCart3.tsx","contents/addToCart/AddToCart4.tsx","contents/addToCart/AddToCart5.tsx","pages/AddToCartPage.tsx","../node_modules/@babel/runtime/helpers/esm/defineProperty.js","../node_modules/@babel/runtime/helpers/esm/objectSpread2.js"],"sourcesContent":["// Data useState + Modal forwardRef\n\nimport React, {\n    forwardRef,\n    memo,\n    useCallback,\n    // useEffect,\n    useImperativeHandle,\n    useMemo,\n    useRef,\n    useState,\n} from \"react\";\nimport \"../../css/addToCart.css\";\n\n// --- Types & Enums ---\n\ninterface DataProps {\n    id: string;\n    title: string;\n    amount: number;\n}\n\ninterface OpenModalProps extends DataProps {\n    // changeAmount: (newAmount: number) => void;\n}\n\ninterface ModalHandles {\n    openModal: (props: OpenModalProps) => void;\n}\n\ninterface UpdateAmountProps {\n    id: string;\n    newAmount: number;\n}\n\n// --- Initial States ---\n\nconst initialData: DataProps[] = [\n    { id: \"1\", title: \"ccc\", amount: 0 },\n    { id: \"2\", title: \"aaa\", amount: 0 },\n    { id: \"3\", title: \"bbb\", amount: 0 },\n];\n\n// --- Main App Component ---\n\nexport default function App() {\n    console.log(\"App\");\n\n    // 데이터 및 관리자 초기화\n    const [data, setData] = useState<DataProps[]>(initialData);\n\n    // Modal 핸들러 참조\n    const modalRef = useRef<ModalHandles | null>(null);\n\n    // 데이터 핸들러\n    const updateAmount = useCallback(({ id, newAmount }: UpdateAmountProps) => {\n        setData((prevData) =>\n            prevData.map((item) =>\n                item.id === id ? { ...item, amount: newAmount } : item\n            )\n        );\n    }, []);\n\n    const sortDataAscending = useCallback(() => {\n        setData((prevData) =>\n            [...prevData].sort((a, b) => a.title.localeCompare(b.title))\n        );\n    }, []);\n\n    const sortDataDescending = useCallback(() => {\n        setData((prevData) =>\n            [...prevData].sort((a, b) => b.title.localeCompare(a.title))\n        );\n    }, []);\n\n    // Modal 열기 핸들러\n    const handleOpenModal = useCallback((props: OpenModalProps) => {\n        modalRef.current?.openModal(props);\n    }, []);\n\n    return (\n        <section className=\"addToCart\">\n            {/* Sorting Controls */}\n            <SortControls\n                sortDataAscending={sortDataAscending}\n                sortDataDescending={sortDataDescending}\n            />\n\n            {/* Product List  */}\n            <ProductList\n                data={data}\n                updateAmount={updateAmount}\n                handleOpenModal={handleOpenModal}\n            />\n\n            {/* Actions */}\n            <ActionButton data={data} />\n\n            {/* Modal */}\n            <Modal ref={modalRef} updateAmount={updateAmount} />\n        </section>\n    );\n}\n\n// --- Sub Components ---\n\ninterface SortControlsProps {\n    sortDataAscending: () => void;\n    sortDataDescending: () => void;\n}\n\nconst SortControls = memo(\n    ({ sortDataAscending, sortDataDescending }: SortControlsProps) => {\n        console.log(\"SortControls\");\n\n        return (\n            <div className=\"addToCart-sorts\">\n                <button type=\"button\" onClick={sortDataAscending}>\n                    오름차순\n                </button>\n                <button type=\"button\" onClick={sortDataDescending}>\n                    내림차순\n                </button>\n            </div>\n        );\n    }\n);\n\ninterface ProductListProps {\n    data: DataProps[];\n    updateAmount: (props: UpdateAmountProps) => void;\n    handleOpenModal: (props: OpenModalProps) => void;\n}\n\nconst ProductList = memo(\n    ({ data, updateAmount, handleOpenModal }: ProductListProps) => {\n        console.log(\"ProductList\");\n\n        return (\n            <ul className=\"addToCart-list\">\n                {data.map((item) => (\n                    <Item\n                        key={item.id}\n                        data={item}\n                        updateAmount={updateAmount}\n                        handleOpenModal={handleOpenModal}\n                    />\n                ))}\n            </ul>\n        );\n    },\n    (prevProps, nextProps) => {\n        return prevProps.data === nextProps.data;\n    }\n);\n\ninterface ItemProps {\n    data: DataProps;\n    updateAmount: (props: UpdateAmountProps) => void;\n    handleOpenModal: (props: OpenModalProps) => void;\n}\n\nconst Item = memo(\n    ({ data, updateAmount, handleOpenModal }: ItemProps) => {\n        console.log(\"Item\", data);\n\n        const { id, title, amount } = data;\n\n        const itemRef = useRef<HTMLLIElement>(null);\n\n        const isMaxAmount = amount >= 10;\n        const isMinAmount = amount <= 0;\n\n        const dispatchAmount = useCallback(\n            (currentAmount: number) => {\n                updateAmount({ id, newAmount: currentAmount });\n            },\n            [updateAmount, id]\n        );\n\n        const handleInputClick = () => {\n            handleOpenModal({\n                id,\n                title,\n                amount,\n            });\n        };\n\n        const increaseAmount = useCallback(() => {\n            if (!isMaxAmount) {\n                dispatchAmount(amount + 1);\n            }\n        }, [isMaxAmount, dispatchAmount, amount]);\n\n        const decreaseAmount = useCallback(() => {\n            if (!isMinAmount) {\n                dispatchAmount(amount - 1);\n            }\n        }, [isMinAmount, dispatchAmount, amount]);\n\n        // useEffect(() => {\n        //     dispatchAmount();\n        // }, [localAmount, dispatchAmount]);\n\n        return (\n            <li\n                className=\"addToCart-item\"\n                data-active={amount > 0}\n                ref={itemRef}\n            >\n                <p>\n                    [{id}] : {title} | amount: {amount}\n                </p>\n                <div className=\"amount-container\">\n                    <input\n                        type=\"number\"\n                        value={amount}\n                        min=\"0\"\n                        max=\"10\"\n                        className=\"amount-input\"\n                        onClick={handleInputClick}\n                        readOnly\n                    />\n                    <div className=\"amount-controls\">\n                        <button\n                            type=\"button\"\n                            className=\"increase-button\"\n                            disabled={isMaxAmount}\n                            onClick={increaseAmount}\n                        >\n                            +\n                        </button>\n                        <button\n                            type=\"button\"\n                            className=\"descrease-button\"\n                            disabled={isMinAmount}\n                            onClick={decreaseAmount}\n                        >\n                            -\n                        </button>\n                    </div>\n                </div>\n            </li>\n        );\n    },\n    (prevProps, nextProps) => {\n        // 성능을 위해 변경이 있는 데이터만 리렌더링\n        return prevProps.data.amount === nextProps.data.amount;\n    }\n);\n\ninterface ActionButtonProps {\n    data: DataProps[];\n}\n\nconst ActionButton = ({ data }: ActionButtonProps) => {\n    console.log(\"ActionButton\");\n\n    const [showData, setShowData] = useState<string>(\"\");\n\n    const filteredData = useMemo(() => {\n        return data.filter((item) => item.amount > 0);\n    }, [data]);\n\n    const handleClick = () => {\n        setShowData(\n            `Data 가져오기 버튼 클릭 후 \\n${JSON.stringify(\n                filteredData,\n                null,\n                4\n            )}`\n        );\n    };\n\n    const handleBlur = () => {\n        setShowData(\"\");\n    };\n\n    return (\n        <div className=\"addToCart-actions\">\n            <span className=\"badge-count\">{filteredData.length}</span>\n            <button\n                className=\"addToCartButton\"\n                onClick={handleClick}\n                onBlur={handleBlur}\n            >\n                Data 가져오기\n            </button>\n            <pre>{showData}</pre>\n        </div>\n    );\n};\n\ninterface ModalProps {\n    updateAmount: (props: UpdateAmountProps) => void;\n}\n\nconst Modal = memo(\n    forwardRef<ModalHandles, ModalProps>(({ updateAmount }, ref) => {\n        console.log(\"Modal\");\n\n        const initialModalState = useMemo(\n            () => ({\n                isVisible: false,\n                id: null as string | null,\n                title: \"\",\n                currentAmount: 0,\n            }),\n            []\n        );\n\n        const [modalState, setModalState] = useState(initialModalState);\n\n        const { isVisible, id, title, currentAmount } = modalState;\n\n        useImperativeHandle(ref, () => ({\n            // Item에서 Modal을 열 때\n            openModal: ({ id, title, amount }: OpenModalProps) => {\n                setModalState({\n                    isVisible: true,\n                    id,\n                    title,\n                    currentAmount: amount,\n                });\n            },\n        }));\n\n        // input element change event : update amount\n        const handleChange = useCallback(\n            (e: React.ChangeEvent<HTMLInputElement>) => {\n                setModalState((prevState) => ({\n                    ...prevState,\n                    currentAmount: Number(e.target.value),\n                }));\n            },\n            []\n        );\n\n        // click confirm button : dispatch update amount, close Modal\n        const handleConfirm = useCallback(() => {\n            updateAmount({ id: id!, newAmount: currentAmount });\n\n            setModalState(initialModalState);\n        }, [currentAmount, id, initialModalState, updateAmount]);\n\n        // close Modal\n        const handleClose = useCallback(() => {\n            setModalState(initialModalState);\n        }, [initialModalState]);\n\n        if (!isVisible) return null;\n\n        return (\n            <div className=\"modal\">\n                <div className=\"modal-container\">\n                    <h3>Modal</h3>\n                    <div className=\"modal-contents\">\n                        <p>id: {id}</p>\n                        <p>title: {title}</p>\n                        <p>amount: {currentAmount}</p>\n                        <input\n                            type=\"number\"\n                            min=\"0\"\n                            max=\"10\"\n                            value={currentAmount}\n                            onChange={handleChange}\n                        />\n                    </div>\n\n                    <div className=\"modal-actions\">\n                        <button type=\"button\" onClick={handleConfirm}>\n                            confirm\n                        </button>\n                        <button type=\"button\" onClick={handleClose}>\n                            close\n                        </button>\n                    </div>\n                </div>\n            </div>\n        );\n    })\n);\n","// Data useReducer + Modal forwardRef\n\nimport React, {\n    memo,\n    forwardRef,\n    useCallback,\n    // useEffect,\n    useImperativeHandle,\n    useReducer,\n    useRef,\n    useState,\n    useMemo,\n} from \"react\";\nimport \"../../css/addToCart.css\";\n\n// --- Types & Enums ---\n\nenum ActionTypes {\n    UPDATE_AMOUNT = \"UPDATE_AMOUNT\",\n    SORT_ASC = \"SORT_ASC\",\n    SORT_DESC = \"SORT_DESC\",\n}\n\ninterface DataProps {\n    id: string;\n    title: string;\n    amount: number;\n}\n\ninterface OpenModalProps extends DataProps {\n    // changeAmount: (newAmount: number) => void;\n}\n\ninterface ModalHandles {\n    openModal: (props: OpenModalProps) => void;\n}\n\ntype Action =\n    | {\n          type: ActionTypes.UPDATE_AMOUNT;\n          payload: {\n              id: string;\n              newAmount: number;\n          };\n      }\n    | {\n          type: ActionTypes.SORT_ASC;\n      }\n    | {\n          type: ActionTypes.SORT_DESC;\n      };\n\n// --- Reducers ---\n\nfunction dataReducer(state: DataProps[], action: Action): DataProps[] {\n    switch (action.type) {\n        case ActionTypes.UPDATE_AMOUNT:\n            return state.map((item) =>\n                item.id === action.payload.id\n                    ? { ...item, amount: action.payload.newAmount }\n                    : item\n            );\n        case ActionTypes.SORT_ASC:\n            return [...state].sort((a, b) => a.title.localeCompare(b.title));\n        case ActionTypes.SORT_DESC:\n            return [...state].sort((a, b) => b.title.localeCompare(a.title));\n        default:\n            return state;\n    }\n}\n\n// --- Initial States ---\n\nconst initialData: DataProps[] = [\n    { id: \"1\", title: \"ccc\", amount: 0 },\n    { id: \"2\", title: \"aaa\", amount: 0 },\n    { id: \"3\", title: \"bbb\", amount: 0 },\n];\n\n// --- Main App Component ---\n\nexport default function App() {\n    console.log(\"App\");\n\n    // 데이터 및 관리자 초기화\n    const [data, dispatch] = useReducer(dataReducer, initialData);\n\n    // Modal 핸들러 참조\n    const modalRef = useRef<ModalHandles | null>(null);\n\n    // Modal 열기 핸들러\n    const handleOpenModal = useCallback((props: OpenModalProps) => {\n        modalRef.current?.openModal(props);\n    }, []);\n\n    return (\n        <section className=\"addToCart\">\n            {/* Sorting Controls */}\n            <SortControls dispatch={dispatch} />\n\n            {/* Product List  */}\n            <ProductList\n                data={data}\n                dispatch={dispatch}\n                handleOpenModal={handleOpenModal}\n            />\n\n            {/* Actions */}\n            <ActionButton data={data} />\n\n            {/* Modal */}\n            <Modal ref={modalRef} dispatch={dispatch} />\n        </section>\n    );\n}\n\n// --- Sub Components ---\n\ninterface SortControlsProps {\n    dispatch: React.Dispatch<Action>;\n}\n\nconst SortControls = memo(({ dispatch }: SortControlsProps) => {\n    console.log(\"SortControls\");\n\n    const sortDataAscending = () => dispatch({ type: ActionTypes.SORT_ASC });\n    const sortDataDescending = () => dispatch({ type: ActionTypes.SORT_DESC });\n\n    return (\n        <div className=\"addToCart-sorts\">\n            <button type=\"button\" onClick={sortDataAscending}>\n                오름차순\n            </button>\n            <button type=\"button\" onClick={sortDataDescending}>\n                내림차순\n            </button>\n        </div>\n    );\n});\n\ninterface ProductListProps {\n    data: DataProps[];\n    dispatch: React.Dispatch<Action>;\n    handleOpenModal: (props: OpenModalProps) => void;\n}\n\nconst ProductList = memo(\n    ({ data, dispatch, handleOpenModal }: ProductListProps) => {\n        console.log(\"ProductList\");\n\n        return (\n            <ul className=\"addToCart-list\">\n                {data.map((item) => (\n                    <Item\n                        key={item.id}\n                        data={item}\n                        dispatch={dispatch}\n                        handleOpenModal={handleOpenModal}\n                    />\n                ))}\n            </ul>\n        );\n    },\n    (prevProps, nextProps) => {\n        return prevProps.data === nextProps.data;\n    }\n);\n\ninterface ItemProps {\n    data: DataProps;\n    dispatch: React.Dispatch<Action>;\n    handleOpenModal: (props: OpenModalProps) => void;\n}\n\nconst Item = memo(\n    ({ data, dispatch, handleOpenModal }: ItemProps) => {\n        console.log(\"Item\", data);\n\n        const { id, title, amount } = data;\n\n        const itemRef = useRef<HTMLLIElement>(null);\n\n        const isMaxAmount = amount >= 10;\n        const isMinAmount = amount <= 0;\n\n        const dispatchAmount = useCallback(\n            (currentAmount: number) => {\n                dispatch({\n                    type: ActionTypes.UPDATE_AMOUNT,\n                    payload: {\n                        id,\n                        newAmount: currentAmount,\n                    },\n                });\n            },\n            [dispatch, id]\n        );\n\n        const handleInputClick = () => {\n            handleOpenModal({\n                id,\n                title,\n                amount,\n            });\n        };\n\n        const increaseAmount = useCallback(() => {\n            if (!isMaxAmount) {\n                dispatchAmount(amount + 1);\n            }\n        }, [isMaxAmount, dispatchAmount, amount]);\n\n        const decreaseAmount = useCallback(() => {\n            if (!isMinAmount) {\n                dispatchAmount(amount - 1);\n            }\n        }, [isMinAmount, dispatchAmount, amount]);\n\n        // useEffect(() => {\n        //     dispatchAmount();\n        // }, [localAmount, dispatchAmount]);\n\n        return (\n            <li\n                className=\"addToCart-item\"\n                data-active={amount > 0}\n                ref={itemRef}\n            >\n                <p>\n                    [{id}] : {title} | amount: {amount}\n                </p>\n                <div className=\"amount-container\">\n                    <input\n                        type=\"number\"\n                        value={amount}\n                        min=\"0\"\n                        max=\"10\"\n                        className=\"amount-input\"\n                        onClick={handleInputClick}\n                        readOnly\n                    />\n                    <div className=\"amount-controls\">\n                        <button\n                            type=\"button\"\n                            className=\"increase-button\"\n                            disabled={isMaxAmount}\n                            onClick={increaseAmount}\n                        >\n                            +\n                        </button>\n                        <button\n                            type=\"button\"\n                            className=\"descrease-button\"\n                            disabled={isMinAmount}\n                            onClick={decreaseAmount}\n                        >\n                            -\n                        </button>\n                    </div>\n                </div>\n            </li>\n        );\n    },\n    (prevProps, nextProps) => {\n        // 성능을 위해 변경이 있는 데이터만 리렌더링\n        return prevProps.data === nextProps.data;\n    }\n);\n\ninterface ActionButtonProps {\n    data: DataProps[];\n}\n\nconst ActionButton = ({ data }: ActionButtonProps) => {\n    console.log(\"ActionButton\");\n\n    const [showData, setShowData] = useState<string>(\"\");\n\n    const filteredData = useMemo(() => {\n        return data.filter((item) => item.amount > 0);\n    }, [data]);\n\n    const handleClick = () => {\n        setShowData(\n            `Data 가져오기 버튼 클릭 후 \\n${JSON.stringify(\n                filteredData,\n                null,\n                4\n            )}`\n        );\n    };\n\n    const handleBlur = () => {\n        setShowData(\"\");\n    };\n\n    return (\n        <div className=\"addToCart-actions\">\n            <span className=\"badge-count\">{filteredData.length}</span>\n            <button\n                className=\"addToCartButton\"\n                onClick={handleClick}\n                onBlur={handleBlur}\n            >\n                Data 가져오기\n            </button>\n            <pre>{showData}</pre>\n        </div>\n    );\n};\n\ninterface ModalProps {\n    dispatch: React.Dispatch<Action>;\n}\n\nconst Modal = memo(\n    forwardRef<ModalHandles, ModalProps>(({ dispatch }, ref) => {\n        console.log(\"Modal\");\n\n        const initialModalState = useMemo(\n            () => ({\n                isVisible: false,\n                id: null as string | null,\n                title: \"\",\n                currentAmount: 0,\n            }),\n            []\n        );\n\n        const [modalState, setModalState] = useState(initialModalState);\n\n        const { isVisible, id, title, currentAmount } = modalState;\n\n        useImperativeHandle(ref, () => ({\n            // Item에서 Modal을 열 때\n            openModal: ({ id, title, amount }: OpenModalProps) => {\n                setModalState({\n                    isVisible: true,\n                    id,\n                    title,\n                    currentAmount: amount,\n                });\n            },\n        }));\n\n        // input element change event : update amount\n        const handleChange = useCallback(\n            (e: React.ChangeEvent<HTMLInputElement>) => {\n                setModalState((prevState) => ({\n                    ...prevState,\n                    currentAmount: Number(e.target.value),\n                }));\n            },\n            []\n        );\n\n        // click confirm button : dispatch update amount, close Modal\n        const handleConfirm = useCallback(() => {\n            dispatch({\n                type: ActionTypes.UPDATE_AMOUNT,\n                payload: {\n                    id: id!,\n                    newAmount: currentAmount,\n                },\n            });\n\n            setModalState(initialModalState);\n        }, [currentAmount, dispatch, id, initialModalState]);\n\n        // close Modal\n        const handleClose = useCallback(() => {\n            setModalState(initialModalState);\n        }, [initialModalState]);\n\n        if (!isVisible) return null;\n\n        return (\n            <div className=\"modal\">\n                <div className=\"modal-container\">\n                    <h3>Modal</h3>\n                    <div className=\"modal-contents\">\n                        <p>id: {id}</p>\n                        <p>title: {title}</p>\n                        <p>amount: {currentAmount}</p>\n                        <input\n                            type=\"number\"\n                            min=\"0\"\n                            max=\"10\"\n                            value={currentAmount}\n                            onChange={handleChange}\n                        />\n                    </div>\n\n                    <div className=\"modal-actions\">\n                        <button type=\"button\" onClick={handleConfirm}>\n                            confirm\n                        </button>\n                        <button type=\"button\" onClick={handleClose}>\n                            close\n                        </button>\n                    </div>\n                </div>\n            </div>\n        );\n    }),\n    (prevProps, nextProps) => {\n        // 성능을 위해 변경이 있는 dispatch만 리렌더링\n        return prevProps.dispatch === nextProps.dispatch;\n    }\n);\n","//  Data useReducer + Modal forwardRef + Modal useReducer\n\nimport React, {\n    memo,\n    forwardRef,\n    useCallback,\n    // useEffect,\n    useImperativeHandle,\n    useReducer,\n    useRef,\n    useState,\n    useMemo,\n} from \"react\";\nimport \"../../css/addToCart.css\";\n\n// --- Types & Enums ---\n\nenum ActionTypes {\n    UPDATE_AMOUNT = \"UPDATE_AMOUNT\",\n    SORT_ASC = \"SORT_ASC\",\n    SORT_DESC = \"SORT_DESC\",\n}\n\ninterface DataProps {\n    id: string;\n    title: string;\n    amount: number;\n}\n\ninterface OpenModalProps extends DataProps {\n    // changeAmount: (newAmount: number) => void;\n}\n\ninterface ModalHandles {\n    openModal: (props: OpenModalProps) => void;\n}\n\ntype Action =\n    | {\n          type: ActionTypes.UPDATE_AMOUNT;\n          payload: {\n              id: string;\n              newAmount: number;\n          };\n      }\n    | {\n          type: ActionTypes.SORT_ASC;\n      }\n    | {\n          type: ActionTypes.SORT_DESC;\n      };\n\n// --- Reducers ---\n\nfunction dataReducer(state: DataProps[], action: Action): DataProps[] {\n    switch (action.type) {\n        case ActionTypes.UPDATE_AMOUNT:\n            return state.map((item) =>\n                item.id === action.payload.id\n                    ? { ...item, amount: action.payload.newAmount }\n                    : item\n            );\n        case ActionTypes.SORT_ASC:\n            return [...state].sort((a, b) => a.title.localeCompare(b.title));\n        case ActionTypes.SORT_DESC:\n            return [...state].sort((a, b) => b.title.localeCompare(a.title));\n        default:\n            return state;\n    }\n}\n\n// --- Initial States ---\n\nconst initialData: DataProps[] = [\n    { id: \"1\", title: \"ccc\", amount: 0 },\n    { id: \"2\", title: \"aaa\", amount: 0 },\n    { id: \"3\", title: \"bbb\", amount: 0 },\n];\n\n// --- Main App Component ---\n\nexport default function App() {\n    console.log(\"App\");\n\n    // Modal 핸들러 참조\n    const modalRef = useRef<ModalHandles | null>(null);\n    // 데이터 및 관리자 초기화\n    const [data, dispatch] = useReducer(dataReducer, initialData);\n\n    // Modal 열기 핸들러\n    const handleOpenModal = useCallback((props: OpenModalProps) => {\n        modalRef.current?.openModal(props);\n    }, []);\n\n    return (\n        <section className=\"addToCart\">\n            {/* Sorting Controls */}\n            <SortControls dispatch={dispatch} />\n\n            {/* Product List  */}\n            <ProductList\n                data={data}\n                handleOpenModal={handleOpenModal}\n                dispatch={dispatch}\n            />\n\n            {/* Actions */}\n            <ActionButton data={data} />\n\n            {/* Modal */}\n            <Modal ref={modalRef} dispatch={dispatch} />\n        </section>\n    );\n}\n\n// --- Sub Components ---\n\ninterface SortControlsProps {\n    dispatch: React.Dispatch<Action>;\n}\n\nconst SortControls = memo(({ dispatch }: SortControlsProps) => {\n    console.log(\"SortControls\");\n\n    const sortDataAscending = () => dispatch({ type: ActionTypes.SORT_ASC });\n    const sortDataDescending = () => dispatch({ type: ActionTypes.SORT_DESC });\n\n    return (\n        <div className=\"addToCart-sorts\">\n            <button type=\"button\" onClick={sortDataAscending}>\n                오름차순\n            </button>\n            <button type=\"button\" onClick={sortDataDescending}>\n                내림차순\n            </button>\n        </div>\n    );\n});\n\ninterface ProductListProps {\n    data: DataProps[];\n    dispatch: React.Dispatch<Action>;\n    handleOpenModal: (props: OpenModalProps) => void;\n}\n\nconst ProductList = memo(\n    ({ data, dispatch, handleOpenModal }: ProductListProps) => {\n        console.log(\"ProductList\");\n        return (\n            <ul className=\"addToCart-list\">\n                {data.map((item) => (\n                    <Item\n                        key={item.id}\n                        data={item}\n                        dispatch={dispatch}\n                        handleOpenModal={handleOpenModal}\n                    />\n                ))}\n            </ul>\n        );\n    },\n    (prevProps, nextProps) => {\n        return prevProps.data === nextProps.data;\n    }\n);\n\ninterface ItemProps {\n    data: DataProps;\n    dispatch: React.Dispatch<Action>;\n    handleOpenModal: (props: OpenModalProps) => void;\n}\n\nconst Item = memo(\n    ({ data, dispatch, handleOpenModal }: ItemProps) => {\n        console.log(\"Item\", data);\n\n        const { id, title, amount } = data;\n\n        const itemRef = useRef<HTMLLIElement>(null);\n\n        const isMaxAmount = amount >= 10;\n        const isMinAmount = amount <= 0;\n\n        const dispatchAmount = useCallback(\n            (currentAmount: number) => {\n                dispatch({\n                    type: ActionTypes.UPDATE_AMOUNT,\n                    payload: {\n                        id,\n                        newAmount: currentAmount,\n                    },\n                });\n            },\n            [dispatch, id]\n        );\n\n        const handleInputClick = () => {\n            handleOpenModal({\n                id,\n                title,\n                amount,\n            });\n        };\n\n        const increaseAmount = useCallback(() => {\n            if (!isMaxAmount) {\n                dispatchAmount(amount + 1);\n            }\n        }, [isMaxAmount, dispatchAmount, amount]);\n\n        const decreaseAmount = useCallback(() => {\n            if (!isMinAmount) {\n                dispatchAmount(amount - 1);\n            }\n        }, [isMinAmount, dispatchAmount, amount]);\n\n        // useEffect(() => {\n        //     dispatchAmount();\n        // }, [localAmount, dispatchAmount]);\n\n        return (\n            <li\n                className=\"addToCart-item\"\n                data-active={amount > 0}\n                ref={itemRef}\n            >\n                <p>\n                    [{id}] : {title} | amount: {amount}\n                </p>\n                <div className=\"amount-container\">\n                    <input\n                        type=\"number\"\n                        value={amount}\n                        min=\"0\"\n                        max=\"10\"\n                        className=\"amount-input\"\n                        onClick={handleInputClick}\n                        readOnly\n                    />\n                    <div className=\"amount-controls\">\n                        <button\n                            type=\"button\"\n                            className=\"increase-button\"\n                            disabled={isMaxAmount}\n                            onClick={increaseAmount}\n                        >\n                            +\n                        </button>\n                        <button\n                            type=\"button\"\n                            className=\"descrease-button\"\n                            disabled={isMinAmount}\n                            onClick={decreaseAmount}\n                        >\n                            -\n                        </button>\n                    </div>\n                </div>\n            </li>\n        );\n    },\n    (prevProps, nextProps) => {\n        // 성능을 위해 변경이 있는 데이터만 리렌더링\n        return prevProps.data.amount === nextProps.data.amount;\n    }\n);\n\ninterface ActionButtonProps {\n    data: DataProps[];\n}\n\nconst ActionButton = ({ data }: ActionButtonProps) => {\n    console.log(\"ActionButton\");\n\n    const [showData, setShowData] = useState<string>(\"\");\n\n    const filteredData = useMemo(() => {\n        return data.filter((item) => item.amount > 0);\n    }, [data]);\n\n    const handleClick = () => {\n        setShowData(\n            `Data 가져오기 버튼 클릭 후 \\n${JSON.stringify(\n                filteredData,\n                null,\n                4\n            )}`\n        );\n    };\n\n    const handleBlur = () => {\n        setShowData(\"\");\n    };\n\n    return (\n        <div className=\"addToCart-actions\">\n            <span className=\"badge-count\">{filteredData.length}</span>\n            <button\n                className=\"addToCartButton\"\n                onClick={handleClick}\n                onBlur={handleBlur}\n            >\n                Data 가져오기\n            </button>\n            <pre>{showData}</pre>\n        </div>\n    );\n};\n\n// Modal 상태관리를 useReducer로 적용\nenum ModalActionTypes {\n    OPEN_MODAL = \"OPEN_MODAL\",\n    UPDATE_AMOUNT = \"UPDATE_AMOUNT\",\n    CLOSE_MODAL = \"CLOSE_MODAL\",\n}\n\ntype ModalAction =\n    | {\n          type: ModalActionTypes.OPEN_MODAL;\n          payload: {\n              id: string;\n              title: string;\n              currentAmount: number;\n          };\n      }\n    | {\n          type: ModalActionTypes.UPDATE_AMOUNT;\n          payload: number;\n      }\n    | {\n          type: ModalActionTypes.CLOSE_MODAL;\n      };\n\nconst initialModalState = {\n    isVisible: false,\n    id: null as string | null,\n    title: \"\",\n    currentAmount: 0,\n};\n\ninterface ModalProps {\n    dispatch: React.Dispatch<Action>;\n}\n\nfunction modalReducer(state: typeof initialModalState, action: ModalAction) {\n    switch (action.type) {\n        case ModalActionTypes.OPEN_MODAL:\n            return {\n                isVisible: true,\n                id: action.payload.id,\n                title: action.payload.title,\n                currentAmount: action.payload.currentAmount,\n            };\n        case ModalActionTypes.UPDATE_AMOUNT:\n            return {\n                ...state,\n                currentAmount: action.payload,\n            };\n        case ModalActionTypes.CLOSE_MODAL:\n            return initialModalState;\n        default:\n            return state;\n    }\n}\n\nconst Modal = memo(\n    forwardRef<ModalHandles, ModalProps>(({ dispatch }, ref) => {\n        console.log(\"Modal\");\n\n        const [modalState, modalDispatch] = useReducer(\n            modalReducer,\n            initialModalState\n        );\n\n        const { isVisible, id, title, currentAmount } = modalState;\n\n        useImperativeHandle(ref, () => ({\n            // Item에서 Modal을 열 때\n            openModal: ({ id, title, amount }: OpenModalProps) => {\n                modalDispatch({\n                    type: ModalActionTypes.OPEN_MODAL,\n                    payload: {\n                        id,\n                        title,\n                        currentAmount: amount,\n                    },\n                });\n            },\n        }));\n\n        // input element change event : update amount\n        const handleChange = useCallback(\n            (e: React.ChangeEvent<HTMLInputElement>) => {\n                modalDispatch({\n                    type: ModalActionTypes.UPDATE_AMOUNT,\n                    payload: Number(e.target.value),\n                });\n            },\n            []\n        );\n\n        // click confirm button : dispatch update id and amount\n        const handleConfirm = useCallback(() => {\n            dispatch({\n                type: ActionTypes.UPDATE_AMOUNT,\n                payload: {\n                    id: id!,\n                    newAmount: currentAmount,\n                },\n            });\n\n            modalDispatch({\n                type: ModalActionTypes.CLOSE_MODAL,\n            });\n        }, [currentAmount, dispatch, id]);\n\n        const handleClose = useCallback(() => {\n            modalDispatch({\n                type: ModalActionTypes.CLOSE_MODAL,\n            });\n        }, []);\n\n        if (!isVisible) return null;\n\n        return (\n            <div className=\"modal\">\n                <div className=\"modal-container\">\n                    <h3>Modal</h3>\n                    <div className=\"modal-contents\">\n                        <p>id: {id}</p>\n                        <p>title: {title}</p>\n                        <p>amount: {currentAmount}</p>\n                        <input\n                            type=\"number\"\n                            min=\"0\"\n                            max=\"10\"\n                            value={currentAmount}\n                            onChange={handleChange}\n                        />\n                    </div>\n\n                    <div className=\"modal-actions\">\n                        <button type=\"button\" onClick={handleConfirm}>\n                            confirm\n                        </button>\n                        <button type=\"button\" onClick={handleClose}>\n                            close\n                        </button>\n                    </div>\n                </div>\n            </div>\n        );\n    }),\n    (prevProps, nextProps) => {\n        // 성능을 위해 변경이 있는 dispatch만 리렌더링\n        return prevProps.dispatch === nextProps.dispatch;\n    }\n);\n","// Data useReducer + Modal useState\n\nimport React, {\n    memo,\n    useCallback,\n    // useEffect,\n    useReducer,\n    useRef,\n    useState,\n    useMemo,\n} from \"react\";\nimport \"../../css/addToCart.css\";\n\n// --- Types & Enums ---\n\nenum ActionTypes {\n    UPDATE_AMOUNT = \"UPDATE_AMOUNT\",\n    SORT_ASC = \"SORT_ASC\",\n    SORT_DESC = \"SORT_DESC\",\n}\n\ninterface DataProps {\n    id: string;\n    title: string;\n    amount: number;\n}\n\ninterface OpenModalProps extends DataProps {\n    // changeAmount: (newAmount: number) => void;\n}\n\ntype Action =\n    | {\n          type: ActionTypes.UPDATE_AMOUNT;\n          payload: {\n              id: string;\n              newAmount: number;\n          };\n      }\n    | {\n          type: ActionTypes.SORT_ASC;\n      }\n    | {\n          type: ActionTypes.SORT_DESC;\n      };\n\n// --- Reducers ---\n\nfunction dataReducer(state: DataProps[], action: Action): DataProps[] {\n    switch (action.type) {\n        case ActionTypes.UPDATE_AMOUNT:\n            return state.map((item) =>\n                item.id === action.payload.id\n                    ? { ...item, amount: action.payload.newAmount }\n                    : item\n            );\n        case ActionTypes.SORT_ASC:\n            return [...state].sort((a, b) => a.title.localeCompare(b.title));\n        case ActionTypes.SORT_DESC:\n            return [...state].sort((a, b) => b.title.localeCompare(a.title));\n        default:\n            return state;\n    }\n}\n\n// --- Initial States ---\n\nconst initialData: DataProps[] = [\n    { id: \"1\", title: \"ccc\", amount: 0 },\n    { id: \"2\", title: \"aaa\", amount: 0 },\n    { id: \"3\", title: \"bbb\", amount: 0 },\n];\n\nconst initialModalState = {\n    isVisible: false,\n    id: null as string | null,\n    title: \"\",\n    currentAmount: 0,\n};\n\n// --- Main App Component ---\n\nexport default function App() {\n    console.log(\"App\");\n\n    // 데이터 및 관리자 초기화\n    const [data, dispatch] = useReducer(dataReducer, initialData);\n\n    // handle Modal\n    const [modalState, setModalState] = useState(initialModalState);\n\n    // Item에서 Modal 열기 핸들러\n    const handleOpenModal = useCallback(\n        ({ id, title, amount }: OpenModalProps) => {\n            setModalState({\n                isVisible: true,\n                id,\n                title,\n                currentAmount: amount,\n            });\n        },\n        []\n    );\n\n    return (\n        <section className=\"addToCart\">\n            <SortControls dispatch={dispatch} />\n            <ProductList\n                data={data}\n                dispatch={dispatch}\n                handleOpenModal={handleOpenModal}\n            />\n            <ActionButton data={data} />\n            <Modal\n                state={modalState}\n                setState={setModalState}\n                dispatch={dispatch}\n            />\n        </section>\n    );\n}\n\n// --- Sub Components ---\n\ninterface SortControlsProps {\n    dispatch: React.Dispatch<Action>;\n}\n\nconst SortControls = memo(({ dispatch }: SortControlsProps) => {\n    console.log(\"SortControls\");\n\n    const sortDataAscending = () => dispatch({ type: ActionTypes.SORT_ASC });\n    const sortDataDescending = () => dispatch({ type: ActionTypes.SORT_DESC });\n\n    return (\n        <div className=\"addToCart-sorts\">\n            <button type=\"button\" onClick={sortDataAscending}>\n                오름차순\n            </button>\n            <button type=\"button\" onClick={sortDataDescending}>\n                내림차순\n            </button>\n        </div>\n    );\n});\n\ninterface ProductListProps {\n    data: DataProps[];\n    dispatch: React.Dispatch<Action>;\n    handleOpenModal: (props: OpenModalProps) => void;\n}\n\nconst ProductList = memo(\n    ({ data, dispatch, handleOpenModal }: ProductListProps) => {\n        console.log(\"ProductList\");\n\n        return (\n            <ul className=\"addToCart-list\">\n                {data.map((item) => (\n                    <Item\n                        key={item.id}\n                        data={item}\n                        dispatch={dispatch}\n                        handleOpenModal={handleOpenModal}\n                    />\n                ))}\n            </ul>\n        );\n    },\n    (prevProps, nextProps) => {\n        return prevProps.data === nextProps.data;\n    }\n);\n\ninterface ItemProps {\n    data: DataProps;\n    dispatch: React.Dispatch<Action>;\n    handleOpenModal: (props: OpenModalProps) => void;\n}\n\nconst Item = memo(\n    ({ data, dispatch, handleOpenModal }: ItemProps) => {\n        console.log(\"Item\", data);\n\n        const { id, title, amount } = data;\n\n        const itemRef = useRef<HTMLLIElement>(null);\n\n        const isMaxAmount = amount >= 10;\n        const isMinAmount = amount <= 0;\n\n        const dispatchAmount = useCallback(\n            (currentAmount: number) => {\n                dispatch({\n                    type: ActionTypes.UPDATE_AMOUNT,\n                    payload: {\n                        id,\n                        newAmount: currentAmount,\n                    },\n                });\n            },\n            [dispatch, id]\n        );\n\n        // Modal 열기, App에 있는 handleOpenModal\n        const handleInputClick = () => {\n            handleOpenModal({\n                id,\n                title,\n                amount,\n            });\n        };\n\n        const increaseAmount = useCallback(() => {\n            if (!isMaxAmount) {\n                dispatchAmount(amount + 1);\n            }\n        }, [isMaxAmount, dispatchAmount, amount]);\n\n        const decreaseAmount = useCallback(() => {\n            if (!isMinAmount) {\n                dispatchAmount(amount - 1);\n            }\n        }, [isMinAmount, dispatchAmount, amount]);\n\n        return (\n            <li\n                className=\"addToCart-item\"\n                data-active={amount > 0}\n                ref={itemRef}\n            >\n                <p>\n                    [{id}] : {title} | amount: {amount}\n                </p>\n                <div className=\"amount-container\">\n                    <input\n                        type=\"number\"\n                        value={amount}\n                        min=\"0\"\n                        max=\"10\"\n                        className=\"amount-input\"\n                        onClick={handleInputClick}\n                        readOnly\n                    />\n                    <div className=\"amount-controls\">\n                        <button\n                            type=\"button\"\n                            className=\"increase-button\"\n                            disabled={isMaxAmount}\n                            onClick={increaseAmount}\n                        >\n                            +\n                        </button>\n                        <button\n                            type=\"button\"\n                            className=\"descrease-button\"\n                            disabled={isMinAmount}\n                            onClick={decreaseAmount}\n                        >\n                            -\n                        </button>\n                    </div>\n                </div>\n            </li>\n        );\n    },\n    (prevProps, nextProps) => {\n        // 성능을 위해 변경이 있는 데이터만 리렌더링\n        return prevProps.data.amount === nextProps.data.amount;\n    }\n);\n\ninterface ActionButtonProps {\n    data: DataProps[];\n}\n\nconst ActionButton = ({ data }: ActionButtonProps) => {\n    console.log(\"ActionButton\");\n\n    const [showData, setShowData] = useState<string>(\"\");\n\n    const filteredData = useMemo(() => {\n        return data.filter((item) => item.amount > 0);\n    }, [data]);\n\n    const handleClick = () => {\n        setShowData(\n            `Data 가져오기 버튼 클릭 후 \\n${JSON.stringify(\n                filteredData,\n                null,\n                4\n            )}`\n        );\n    };\n\n    return (\n        <div className=\"addToCart-actions\">\n            <span className=\"badge-count\">{filteredData.length}</span>\n            <button\n                className=\"addToCartButton\"\n                onClick={handleClick}\n                onBlur={() => setShowData(\"\")}\n            >\n                Data 가져오기\n            </button>\n            <pre>{showData}</pre>\n        </div>\n    );\n};\n\ninterface ModalProps {\n    state: typeof initialModalState;\n    setState: React.Dispatch<React.SetStateAction<typeof initialModalState>>;\n    // closeModal: () => void;\n    dispatch: React.Dispatch<Action>;\n}\n\nconst Modal = memo(\n    ({ state, setState, dispatch }: ModalProps) => {\n        console.log(\"Modal\");\n\n        const { isVisible, id, title, currentAmount } = state;\n\n        const closeModal = useCallback(() => {\n            setState(initialModalState);\n        }, [setState]);\n\n        // input element change event : update amount\n        const handleChange = useCallback(\n            (e: React.ChangeEvent<HTMLInputElement>) => {\n                setState((prevState) => ({\n                    ...prevState,\n                    currentAmount: Number(e.target.value),\n                }));\n            },\n            [setState]\n        );\n\n        // click confirm button : dispatch update amount, close Modal\n        const handleConfirm = useCallback(() => {\n            if (id) {\n                dispatch({\n                    type: ActionTypes.UPDATE_AMOUNT,\n                    payload: {\n                        id,\n                        newAmount: currentAmount,\n                    },\n                });\n            }\n\n            closeModal();\n        }, [currentAmount, dispatch, id, closeModal]);\n\n        if (!isVisible) return null;\n\n        return (\n            <div className=\"modal\">\n                <div className=\"modal-container\">\n                    <h3>Modal</h3>\n                    <div className=\"modal-contents\">\n                        <p>id: {id}</p>\n                        <p>title: {title}</p>\n                        <p>amount: {currentAmount}</p>\n                        <input\n                            type=\"number\"\n                            min=\"0\"\n                            max=\"10\"\n                            value={currentAmount}\n                            onChange={handleChange}\n                        />\n                    </div>\n\n                    <div className=\"modal-actions\">\n                        <button type=\"button\" onClick={handleConfirm}>\n                            confirm\n                        </button>\n                        <button type=\"button\" onClick={() => closeModal()}>\n                            close\n                        </button>\n                    </div>\n                </div>\n            </div>\n        );\n    },\n    (prevProps, nextProps) => {\n        return prevProps.state === nextProps.state;\n    }\n);\n","// Data useContext + Modal forwardRef\n\nimport React, {\n    createContext,\n    forwardRef,\n    memo,\n    useCallback,\n    useContext,\n    // useEffect,\n    useImperativeHandle,\n    useMemo,\n    useRef,\n    useState,\n} from \"react\";\nimport \"../../css/addToCart.css\";\n\n// --- Types & Enums ---\n\ninterface DataProps {\n    id: string;\n    title: string;\n    amount: number;\n}\n\ninterface OpenModalProps extends DataProps {\n    // changeAmount: (newAmount: number) => void;\n}\n\ninterface ModalHandles {\n    openModal: (props: OpenModalProps) => void;\n}\n\n// --- Context ---\ninterface DataContextType {\n    data: DataProps[];\n    setData: React.Dispatch<React.SetStateAction<DataProps[]>>;\n}\nconst defaultContextValue: DataContextType = {\n    data: [],\n    setData: () => {},\n};\nconst DataContext = createContext<DataContextType>(defaultContextValue);\n\n// --- Initial States ---\n\nconst initialData: DataProps[] = [\n    { id: \"1\", title: \"ccc\", amount: 0 },\n    { id: \"2\", title: \"aaa\", amount: 0 },\n    { id: \"3\", title: \"bbb\", amount: 0 },\n];\n\nconst initialModalState = () => ({\n    isVisible: false,\n    id: null as string | null,\n    title: \"\",\n    currentAmount: 0,\n});\n\n// --- Main App Component ---\n\nexport default function AddToCart5() {\n    console.log(\"App\");\n\n    // 데이터 및 관리자 초기화\n    const [data, setData] = useState<DataProps[]>(initialData);\n\n    // Modal 핸들러 참조\n    const modalRef = useRef<ModalHandles | null>(null);\n\n    // Modal 열기 핸들러\n    const handleOpenModal = useCallback((props: OpenModalProps) => {\n        modalRef.current?.openModal(props);\n    }, []);\n\n    return (\n        <DataContext.Provider value={{ data, setData }}>\n            <section className=\"addToCart\">\n                <SortControls />\n                <ProductList handleOpenModal={handleOpenModal} />\n                <ActionButton />\n                <Modal ref={modalRef} />\n            </section>\n        </DataContext.Provider>\n    );\n}\n\n// --- Sub Components ---\n\nconst SortControls = () => {\n    console.log(\"SortControls\");\n\n    const { setData } = useContext(DataContext);\n\n    const sortDataAscending = useCallback(() => {\n        setData((prevData) =>\n            [...prevData].sort((a, b) => a.title.localeCompare(b.title))\n        );\n    }, [setData]);\n\n    const sortDataDescending = useCallback(() => {\n        setData((prevData) =>\n            [...prevData].sort((a, b) => b.title.localeCompare(a.title))\n        );\n    }, [setData]);\n\n    return (\n        <div className=\"addToCart-sorts\">\n            <button type=\"button\" onClick={sortDataAscending}>\n                오름차순\n            </button>\n            <button type=\"button\" onClick={sortDataDescending}>\n                내림차순\n            </button>\n        </div>\n    );\n};\n\ninterface ProductListProps {\n    handleOpenModal: (props: OpenModalProps) => void;\n}\n\nconst ProductList = memo(({ handleOpenModal }: ProductListProps) => {\n    console.log(\"ProductList\");\n\n    const { data } = useContext(DataContext);\n\n    return (\n        <ul className=\"addToCart-list\">\n            {data.map((item) => (\n                <Item\n                    key={item.id}\n                    data={item}\n                    handleOpenModal={handleOpenModal}\n                />\n            ))}\n        </ul>\n    );\n});\n\ninterface ItemProps {\n    data: DataProps;\n    handleOpenModal: (props: OpenModalProps) => void;\n}\n\nconst Item = memo(\n    ({ data, handleOpenModal }: ItemProps) => {\n        console.log(\"Item\", data);\n\n        const { setData } = useContext(DataContext);\n\n        const { id, title, amount } = data;\n\n        const itemRef = useRef<HTMLLIElement>(null);\n\n        const isMaxAmount = amount >= 10;\n        const isMinAmount = amount <= 0;\n\n        const updateAmount = useCallback(\n            (newAmount: number) => {\n                setData((prevData) =>\n                    prevData.map((item) =>\n                        item.id === id ? { ...item, amount: newAmount } : item\n                    )\n                );\n            },\n            [id, setData]\n        );\n\n        const handleInputClick = () => {\n            handleOpenModal({\n                id,\n                title,\n                amount,\n            });\n        };\n\n        const increaseAmount = useCallback(() => {\n            if (!isMaxAmount) {\n                updateAmount(amount + 1);\n            }\n        }, [isMaxAmount, updateAmount, amount]);\n\n        const decreaseAmount = useCallback(() => {\n            if (!isMinAmount) {\n                updateAmount(amount - 1);\n            }\n        }, [isMinAmount, updateAmount, amount]);\n\n        // useEffect(() => {\n        //     updateAmount();\n        // }, [localAmount, updateAmount]);\n\n        return (\n            <li\n                className=\"addToCart-item\"\n                data-active={amount > 0}\n                ref={itemRef}\n            >\n                <p>\n                    [{id}] : {title} | amount: {amount}\n                </p>\n                <div className=\"amount-container\">\n                    <input\n                        type=\"number\"\n                        value={amount}\n                        min=\"0\"\n                        max=\"10\"\n                        className=\"amount-input\"\n                        onClick={handleInputClick}\n                        readOnly\n                    />\n                    <div className=\"amount-controls\">\n                        <button\n                            type=\"button\"\n                            className=\"increase-button\"\n                            disabled={isMaxAmount}\n                            onClick={increaseAmount}\n                        >\n                            +\n                        </button>\n                        <button\n                            type=\"button\"\n                            className=\"descrease-button\"\n                            disabled={isMinAmount}\n                            onClick={decreaseAmount}\n                        >\n                            -\n                        </button>\n                    </div>\n                </div>\n            </li>\n        );\n    },\n    (prevProps, nextProps) => {\n        // id, title, amount 중 하나라도 변경되면 리렌더링을 트리거\n        return (\n            prevProps.data.id === nextProps.data.id &&\n            prevProps.data.title === nextProps.data.title &&\n            prevProps.data.amount === nextProps.data.amount\n        );\n    }\n);\n\nconst ActionButton = () => {\n    console.log(\"ActionButton\");\n\n    const { data } = useContext(DataContext);\n\n    const [showData, setShowData] = useState<string>(\"\");\n\n    const filteredData = useMemo(() => {\n        return data.filter((item) => item.amount > 0);\n    }, [data]);\n\n    const handleClick = () => {\n        setShowData(\n            `Data 가져오기 버튼 클릭 후 \\n${JSON.stringify(\n                filteredData,\n                null,\n                4\n            )}`\n        );\n    };\n\n    const handleBlur = () => {\n        setShowData(\"\");\n    };\n\n    return (\n        <div className=\"addToCart-actions\">\n            <span className=\"badge-count\">{filteredData.length}</span>\n            <button\n                className=\"addToCartButton\"\n                onClick={handleClick}\n                onBlur={handleBlur}\n            >\n                Data 가져오기\n            </button>\n            <pre>{showData}</pre>\n        </div>\n    );\n};\n\nconst Modal = memo(\n    forwardRef<ModalHandles, {}>((props, ref) => {\n        console.log(\"Modal\");\n\n        const { setData } = useContext(DataContext);\n\n        // Lazy Initialization: 컴포넌트가 처음 렌더링될 때만 함수를 실행\n        const [modalState, setModalState] = useState(() => initialModalState());\n        // const [modalState, setModalState] = useState(initialModalState);\n\n        const { isVisible, id, title, currentAmount } = modalState;\n\n        useImperativeHandle(ref, () => ({\n            // Item에서 Modal을 열 때\n            openModal: ({ id, title, amount }: OpenModalProps) => {\n                setModalState({\n                    isVisible: true,\n                    id,\n                    title,\n                    currentAmount: amount,\n                });\n            },\n        }));\n\n        const changeDataAmount = useCallback(\n            (id: string, newAmount: number) => {\n                setData((prevData) =>\n                    prevData.map((item) =>\n                        item.id === id ? { ...item, amount: newAmount } : item\n                    )\n                );\n            },\n            [setData]\n        );\n\n        // input element change event : update amount\n        const handleChange = useCallback(\n            (e: React.ChangeEvent<HTMLInputElement>) => {\n                setModalState((prevState) => ({\n                    ...prevState,\n                    currentAmount: Number(e.target.value),\n                }));\n            },\n            []\n        );\n\n        // click confirm button : dispatch update amount, close Modal\n        const handleConfirm = useCallback(() => {\n            changeDataAmount(id!, currentAmount);\n\n            setModalState(initialModalState);\n        }, [currentAmount, id, changeDataAmount]);\n\n        // close Modal\n        const handleClose = useCallback(() => {\n            setModalState(initialModalState);\n        }, []);\n\n        if (!isVisible) return null;\n\n        return (\n            <div className=\"modal\">\n                <div className=\"modal-container\">\n                    <h3>Modal</h3>\n                    <div className=\"modal-contents\">\n                        <p>id: {id}</p>\n                        <p>title: {title}</p>\n                        <p>amount: {currentAmount}</p>\n                        <input\n                            type=\"number\"\n                            min=\"0\"\n                            max=\"10\"\n                            value={currentAmount}\n                            onChange={handleChange}\n                        />\n                    </div>\n\n                    <div className=\"modal-actions\">\n                        <button type=\"button\" onClick={handleConfirm}>\n                            confirm\n                        </button>\n                        <button type=\"button\" onClick={handleClose}>\n                            close\n                        </button>\n                    </div>\n                </div>\n            </div>\n        );\n    })\n);\n","import \"../css/addToCartPage.css\";\nimport AddToCart1 from \"../contents/addToCart/AddToCart1\";\nimport AddToCart2 from \"../contents/addToCart/AddToCart2\";\nimport AddToCart3 from \"../contents/addToCart/AddToCart3\";\nimport AddToCart4 from \"../contents/addToCart/AddToCart4\";\nimport AddToCart5 from \"../contents/addToCart/AddToCart5\";\n\nexport default function memoPage() {\n    return (\n        <section className=\"addToCartPage\">\n            <h1>AddToCart</h1>\n\n            <h2>AddToCart 1 </h2>\n            <h3>: Data useState + Modal forwardRef</h3>\n            <ul>\n                <li>state를 루트에서 관리</li>\n                <li>관련 메서드들도 루트에 작성, 한 눈에 파악이 어렵다.</li>\n            </ul>\n\n            <AddToCart1 />\n\n            <h2>AddToCart 2 *****</h2>\n            <h3> : Data useReducer + Modal forwardRef</h3>\n            <ul>\n                <li>Modal을 ref로, Data를 useReducer로 컨트롤</li>\n                <li>Data를 Reducer를 적용하면 한 눈에 보기 쉽다. </li>\n                <li>ActionButton의 리랜더링을 더 막을 수는 없을까?</li>\n                <li>App, ProductList의 리랜더링은 괜찮은가?</li>\n                <li>이 방식이 가장 좋은 것 같다.</li>\n            </ul>\n\n            <AddToCart2 />\n            <h2>AddToCart 3</h2>\n            <h3>: Data useReducer + Modal forwardRef + Modal useReducer</h3>\n            <ul>\n                <li>Modal의 상태관리를 useReducer로 적용</li>\n                <li>\n                    ModalAction, modalReducer를 통해 Modal의 동작이 한 눈에\n                    보인다.\n                </li>\n                <li>코드가 길어진다. </li>\n                <li>굳이 useReducer로 적용해야 할까?</li>\n            </ul>\n\n            <AddToCart3 />\n\n            <h2>AddToCart 4 ***</h2>\n            <h3>: Data useReducer + Modal useState</h3>\n            <ul>\n                <li>\n                    Data는 useReducer를 사용하는 것이 코드를 한 눈에 보기가\n                    좋다.\n                </li>\n                <li>\n                    Modal을 forwardRef를 사용하지 않고 useState로 구현해도\n                    괜찮은 것 같다.\n                </li>\n                <li>\n                    ModalState, setModalState, handleOpenModal 구현이 루트에\n                    있어야 한다.\n                </li>\n                <li>\n                    ModalState, setModalState을 Modal에 Prop로 전달해야 한다.\n                </li>\n            </ul>\n\n            <AddToCart4 />\n\n            <h2>AddToCart 5 : not recommend</h2>\n            <h3>: Data useContext + Modal forwardRef</h3>\n            <ul>\n                <li>모든 컴포넌트들이 리렌더링되고 memo를 적용해도 리랜더링</li>\n                <li>\n                    Separate Contexts: 현재 DataContext에서는 모든 아이템\n                    데이터와 setData 함수를 함께 제공하고 있다. 이렇게 되면,\n                    하나의 아이템만 변경되어도 모든 아이템에 대한 리렌더링이\n                    발생할 수 있다. data와 setData를 분리된 context로 관리하면\n                    이러한 문제를 줄일 수 있다.\n                </li>\n                <li>\n                    props 전달을 줄이는 것은 코드의 가독성과 유지 보수성을 위한\n                    것이며, 실제 성능 향상을 위해서는 다른 최적화 기법들도 함께\n                    고려해야 한다.\n                </li>\n            </ul>\n            <AddToCart5 />\n\n            <h2>AddToCart 6 : </h2>\n            <h3> : Data useReducer + Modal forwardRef + useContext</h3>\n            <ul>\n                <li>dispatch를 Context로 적용</li>\n                <li>역시나 모든 컴포넌트가 리렌더링</li>\n            </ul>\n            <AddToCart5 />\n        </section>\n    );\n}\n","import toPropertyKey from \"./toPropertyKey.js\";\nexport default function _defineProperty(obj, key, value) {\n  key = toPropertyKey(key);\n  if (key in obj) {\n    Object.defineProperty(obj, key, {\n      value: value,\n      enumerable: true,\n      configurable: true,\n      writable: true\n    });\n  } else {\n    obj[key] = value;\n  }\n  return obj;\n}","import defineProperty from \"./defineProperty.js\";\nfunction ownKeys(object, enumerableOnly) {\n  var keys = Object.keys(object);\n  if (Object.getOwnPropertySymbols) {\n    var symbols = Object.getOwnPropertySymbols(object);\n    enumerableOnly && (symbols = symbols.filter(function (sym) {\n      return Object.getOwnPropertyDescriptor(object, sym).enumerable;\n    })), keys.push.apply(keys, symbols);\n  }\n  return keys;\n}\nexport default function _objectSpread2(target) {\n  for (var i = 1; i < arguments.length; i++) {\n    var source = null != arguments[i] ? arguments[i] : {};\n    i % 2 ? ownKeys(Object(source), !0).forEach(function (key) {\n      defineProperty(target, key, source[key]);\n    }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)) : ownKeys(Object(source)).forEach(function (key) {\n      Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key));\n    });\n  }\n  return target;\n}"],"names":["initialData","id","title","amount","App","console","log","_useState","useState","_useState2","_slicedToArray","data","setData","modalRef","useRef","updateAmount","useCallback","_ref","newAmount","prevData","map","item","_objectSpread","sortDataAscending","_toConsumableArray","sort","a","b","localeCompare","sortDataDescending","handleOpenModal","props","_modalRef$current","current","openModal","_jsxs","className","children","_jsx","SortControls","ProductList","ActionButton","Modal","ref","memo","_ref2","type","onClick","_ref3","Item","prevProps","nextProps","_ref4","itemRef","isMaxAmount","isMinAmount","dispatchAmount","currentAmount","increaseAmount","decreaseAmount","value","min","max","readOnly","disabled","_ref5","_useState3","_useState4","showData","setShowData","filteredData","useMemo","filter","length","concat","JSON","stringify","onBlur","forwardRef","_ref6","initialModalState","isVisible","_useState5","_useState6","modalState","setModalState","useImperativeHandle","_ref7","handleChange","e","prevState","Number","target","handleConfirm","handleClose","onChange","ActionTypes","dataReducer","state","action","UPDATE_AMOUNT","payload","SORT_ASC","SORT_DESC","_useReducer","useReducer","_useReducer2","dispatch","ModalActionTypes","modalReducer","OPEN_MODAL","CLOSE_MODAL","_useReducer3","_useReducer4","modalDispatch","setState","closeModal","defaultContextValue","DataContext","createContext","AddToCart5","Provider","useContext","changeDataAmount","memoPage","AddToCart1","AddToCart2","AddToCart3","AddToCart4","_defineProperty","obj","key","toPropertyKey","Object","defineProperty","enumerable","configurable","writable","ownKeys","object","enumerableOnly","keys","getOwnPropertySymbols","symbols","sym","getOwnPropertyDescriptor","push","apply","_objectSpread2","i","arguments","source","forEach","getOwnPropertyDescriptors","defineProperties"],"sourceRoot":""}