{"version":3,"file":"static/js/23.266b8b8b.chunk.js","mappings":"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","sources":["webpack://my-app/./src/css/UseMemo.module.css?0c6b","contents/useMemo/UseMemo1.tsx","contents/useMemo/UseMemo2.tsx","contents/useMemo/UseMemo3.tsx","webpack://my-app/./src/css/UseMemoPage.module.css?392b","pages/UseMemoPage.tsx"],"sourcesContent":["// extracted by mini-css-extract-plugin\nexport default {\"useMemo1\":\"UseMemo_useMemo1__HhXzL\",\"useMemo2\":\"UseMemo_useMemo2__e+aS9\",\"useMemo3\":\"UseMemo_useMemo3__rZWR-\"};","import { useMemo, useState } from \"react\";\nimport styles from \"../../css/UseMemo.module.css\";\n\nconst calculate = (amount: number) => {\n    console.log(\"calculate\");\n    return amount * 100;\n};\n\nconst delayCalculate = (amount: number) => {\n    console.log(\"delayCalculate\");\n    for (let i = 0; i < 100; i++) {}\n    return amount * 1000;\n};\n\nexport default function UseMemo1() {\n    const [amount, setAmount] = useState<number>(0);\n    const [delayAmount, setDelayAmount] = useState<number>(0);\n\n    const price = calculate(amount);\n\n    // const delayPrice = delayCalculate(delayAmount);\n    const delayPrice = useMemo(() => {\n        return delayCalculate(delayAmount);\n    }, [delayAmount]);\n    // delayAmount가 변경될 때만 다시 memoizaton\n\n    return (\n        <div className={styles.useMemo1}>\n            <h3>가격 계산</h3>\n            <input\n                type=\"number\"\n                value={amount}\n                min=\"0\"\n                onChange={(e) => setAmount(parseInt(e.target.value))}\n            />\n            <p>가격(단가 100) : {price}</p>\n\n            <h3>delay 가격 계산 : useMemo</h3>\n            <input\n                type=\"number\"\n                value={delayAmount}\n                min=\"0\"\n                onChange={(e) => setDelayAmount(parseInt(e.target.value))}\n            />\n            <p>가격(단가 1,000) : {delayPrice}</p>\n        </div>\n    );\n}\n","import { useEffect, useMemo, useState } from \"react\";\nimport styles from \"../../css/UseMemo.module.css\";\n\nexport default function UseMemo2() {\n    const [number, setNumber] = useState<number>(0);\n    const [isCat, setIsCat] = useState<boolean>(true);\n\n    // 1. animal이 원시타입 string 인 경우\n    // const animal = isCat ? \"cat\" : \"dog\";\n\n    // useEffect(() => {\n    //     console.log(\"useEffect 호출\");\n    // }, [animal]);\n    // useEffect는 처음에 호출이 되고 animal이 바뀌었을 때 호출된다.\n\n    // 2. animal이 객체인 경우\n    const animal = useMemo(() => {\n        return {\n            kind: isCat ? \"cat\" : \"dog\",\n        };\n    }, [isCat]);\n    // 변수에 원시 타입을 할당하면 변수에 저장\n    // 변수에 할당된 객체 타입은 렌더링 될 때마다 참조된 메모리 주소가 다르다.\n    // 따라서 useMemo를 사용하여 참조 메모리 주소를 고정\n\n    useEffect(() => {\n        console.log(\"useEffect 호출\");\n        // 무거운 작업\n    }, [animal]);\n\n    return (\n        <div className={styles.useMemo2}>\n            <h3>원시 타입과 객체 비교</h3>\n\n            <h4>숫자 입력</h4>\n            <input\n                type=\"number\"\n                value={number}\n                onChange={(e) => setNumber(parseInt(e.target.value))}\n            />\n\n            <h4>동물</h4>\n            <p>{animal.kind}</p>\n            <button onClick={() => setIsCat(!isCat)}>고양이?</button>\n        </div>\n    );\n}\n","import { useMemo } from \"react\";\nimport styles from \"../../css/UseMemo.module.css\";\n\ninterface ItemProps {\n    id: string;\n    title: string;\n    amount: number;\n}\n\ninterface ReportProps {\n    item: ItemProps;\n}\n\nconst items = [\n    { id: \"1\", title: \"title\", amount: 1 },\n    { id: \"2\", title: \"title\", amount: 2 },\n];\n\nexport default function UseMemo3() {\n    return (\n        <div className={styles.useMemo3}>\n            <h3>loop 안에서 사용시</h3>\n            <ul>\n                {items.map((item) => (\n                    <Report key={item.id} item={item} />\n                ))}\n            </ul>\n        </div>\n    );\n}\n\nfunction Report({ item }: ReportProps) {\n    const data = useMemo(() => calculateReport(item), [item]);\n    const { id, title, amount } = data;\n    return (\n        <li>\n            {id} {title} {amount}\n        </li>\n    );\n}\n\nfunction calculateReport({ id, title, amount }: ItemProps) {\n    console.log(\"calculateReport\");\n    return {\n        id,\n        title,\n        amount: amount * 10,\n    };\n}\n\n// 또는\n// const Report = memo(function Report({ item }) {\n//     const data = calculateReport(item);\n//     return (\n//       <figure>\n//         <Chart data={data} />\n//       </figure>\n//     );\n//   });\n","// extracted by mini-css-extract-plugin\nexport default {\"useMemoPage\":\"UseMemoPage_useMemoPage__W6QiH\"};","import UseMemo1 from \"../contents/useMemo/UseMemo1\";\nimport UseMemo2 from \"../contents/useMemo/UseMemo2\";\nimport UseMemo3 from \"../contents/useMemo/UseMemo3\";\nimport styles from \"../css/UseMemoPage.module.css\";\n\nfunction UseMemoPage() {\n    return (\n        <section className={styles.useMemoPage}>\n            <h1>useMemo Page</h1>\n\n            <p>\n                <strong>\n                    자주 사용하는 값을 memoozed 해놓고 반복적으로 사용. <br />\n                    값이 바뀔 때만 다시 memoization\n                </strong>\n            </p>\n\n            <code>\n                const cachedValue = useMemo(calculateValue, dependencies)\n            </code>\n            <ul>\n                <li>\n                    렌더링 {\"->\"} component 함수 호출, useMemo를 통해\n                    memoization {\"->\"} 렌더링 {\"->\"} component 함수 호출,\n                    memoized 된 값 재사용\n                </li>\n                <li>\n                    dependencies 의존성 배열: 배열 안 요소의 값이 업데이트 될 때\n                    다시 Memoization\n                </li>\n                <li>\n                    의존성 배열이 빈 배열인 경우 맨처음 Memoization, 이후에는\n                    항상 Memoized된 값을 사용\n                </li>\n                <li>\n                    Memoization 한다는 것은 따로 메모리에 저장하는 것이므로\n                    무분별하게 남발하면 안된다. 꼭 필요할때만.\n                </li>\n            </ul>\n\n            <h2>예제 1</h2>\n            <UseMemo1 />\n\n            <h2>예제 2</h2>\n            <UseMemo2 />\n\n            <h2>예제 3</h2>\n            <UseMemo3 />\n        </section>\n    );\n}\n\nexport default UseMemoPage;\n"],"names":["calculate","amount","console","log","delayCalculate","i","UseMemo1","_useState","useState","_useState2","_slicedToArray","setAmount","_useState3","_useState4","delayAmount","setDelayAmount","price","delayPrice","useMemo","_jsxs","className","styles","useMemo1","children","_jsx","type","value","min","onChange","e","parseInt","target","UseMemo2","number","setNumber","isCat","setIsCat","animal","kind","useEffect","useMemo2","onClick","items","id","title","UseMemo3","useMemo3","map","item","Report","_ref","data","_ref2","calculateReport"],"sourceRoot":""}